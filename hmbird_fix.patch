From: "用户" <user@example.com>
Date: Wed, 19 Jun 2024 00:00:00 +0800
Subject: [PATCH] hmbird: 添加GKI兼容性检查以支持OGKI dtbo

当使用GKI内核时，由于设备树中定义了oplus,hmbird节点的version_type
属性为"HMBIRD_OGKI"，而GKI内核期望的是"HMBIRD_GKI"，导致设备无法
启动。此补丁添加兼容层，使内核能够检测并适应不同的版本类型配置，
从而在不修改dtbo的情况下使用GKI内核。

Signed-off-by: 用户 <user@example.com>
---
 kernel_platform/msm-kernel/kernel/sched/walt/walt.h     |  19 ++++++++++
 kernel_platform/msm-kernel/kernel/sched/walt/walt.c     |  26 +++++++++++++
 vendor/oplus/kernel/cpu/sched_ext/main.c                |  64 ++++++++++++++++++++++++++++++++
 3 files changed, 109 insertions(+), 0 deletions(-)

diff --git a/kernel_platform/msm-kernel/kernel/sched/walt/walt.h b/kernel_platform/msm-kernel/kernel/sched/walt/walt.h
index xxxxxxx..xxxxxxx 100644
--- a/kernel_platform/msm-kernel/kernel/sched/walt/walt.h
+++ b/kernel_platform/msm-kernel/kernel/sched/walt/walt.h
@@ -1473,6 +1473,7 @@ struct scx_sched_gki_ops {
 	bool (*account_for_runnable_bypass)(struct rq *rq, struct task_struct *p, int event);
 	void (*window_rollover_run_once)(struct rq *rq);
 	void (*do_sched_yield_before)(long *skip);
+	bool (*check_hmbird_version_type)(void);
 };
 
 extern struct scx_sched_gki_ops *scx_sched_ops;
@@ -1495,6 +1496,17 @@ int register_scx_sched_gki_ops(struct scx_sched_gki_ops *ops);
 
 #endif
 
+/* Helper function to check hmbird version type from device tree */
+static inline bool is_hmbird_gki_type(void)
+{
+#ifdef CONFIG_HMBIRD_SCHED_GKI
+	if (scx_sched_ops && scx_sched_ops->check_hmbird_version_type)
+		return scx_sched_ops->check_hmbird_version_type();
+	return false;
+#else
+	return false;
+#endif
+}
 
 extern void pipeline_check(struct walt_rq *wrq);
 extern bool enable_load_sync(int cpu);
diff --git a/kernel_platform/msm-kernel/kernel/sched/walt/walt.c b/kernel_platform/msm-kernel/kernel/sched/walt/walt.c
index xxxxxxx..xxxxxxx 100644
--- a/kernel_platform/msm-kernel/kernel/sched/walt/walt.c
+++ b/kernel_platform/msm-kernel/kernel/sched/walt/walt.c
@@ -5591,6 +5591,32 @@ struct scx_sched_gki_ops *scx_sched_ops __read_mostly;
 
 MODULE_SOFTDEP("pre: sched-walt-debug");
 
+#ifdef CONFIG_HMBIRD_SCHED_GKI
+
+/* Forward declaration for hmbird version type check function */
+extern bool hmbird_check_version_type(void) __attribute__((weak));
+
+/*
+ * check_hmbird_gki_compatible - Check if the hmbird module is compatible with GKI
+ * 
+ * This function checks if the hmbird module is compatible with GKI by checking
+ * the version type provided by the hmbird module. If the hmbird module is not
+ * loaded or doesn't provide a version type, we'll assume it's not compatible.
+ */
+bool check_hmbird_gki_compatible(void)
+{
+	if (hmbird_check_version_type)
+		return hmbird_check_version_type();
+	
+	/* 
+	 * If hmbird module is not loaded or doesn't provide a version type check,
+	 * assume it's not compatible. The default is to be cautious.
+	 */
+	return false;
+}
+EXPORT_SYMBOL(check_hmbird_gki_compatible);
+
+#endif /* CONFIG_HMBIRD_SCHED_GKI */
 
 int register_scx_sched_gki_ops(struct scx_sched_gki_ops *ops)
 {
diff --git a/vendor/oplus/kernel/cpu/sched_ext/main.c b/vendor/oplus/kernel/cpu/sched_ext/main.c
index xxxxxxx..xxxxxxx 100644
--- a/vendor/oplus/kernel/cpu/sched_ext/main.c
+++ b/vendor/oplus/kernel/cpu/sched_ext/main.c
@@ -9,6 +9,7 @@
 #include <linux/uaccess.h>
 #include <linux/slab.h>
 #include <linux/cpufreq.h>
+#include <linux/of.h>
 #include "hmbird_sched_proc.h"
 
 #define HMBIRD_SCHED_PROC_DIR "hmbird_sched"
@@ -33,8 +34,63 @@ int heartbeat_enable;
 int watchdog_enable;
 int save_gov;
 unsigned int cpu_cluster_masks;
+
+/* To store the hmbird version type from device tree */
+static char hmbird_version_type[32] = "";
 
 char saved_gov[NR_CPUS][16];
+
+/* Function to check hmbird version type */
+bool hmbird_check_version_type(void)
+{
+	/*
+	 * Compare with "HMBIRD_GKI" - this is what we need to work with our GKI kernel
+	 * Return true if the version type is "HMBIRD_GKI", which means we should
+	 * be able to work with the current kernel without modification to dtbo
+	 */
+	return (strcmp(hmbird_version_type, "HMBIRD_GKI") == 0);
+}
+
+/* Function to read hmbird version type from device tree */
+static int hmbird_read_version_type(void)
+{
+	struct device_node *node;
+	const char *type_str;
+	int ret = -EINVAL;
+
+	/* Find the oplus,hmbird node in device tree */
+	node = of_find_node_by_path("/soc/oplus,hmbird");
+	if (!node) {
+		pr_info("hmbird: No oplus,hmbird node found in device tree\n");
+		return ret;
+	}
+
+	/* Read the version_type/type property */
+	ret = of_property_read_string(of_get_child_by_name(node, "version_type"), 
+				"type", &type_str);
+	if (ret) {
+		pr_info("hmbird: Failed to read version_type/type from device tree\n");
+		of_node_put(node);
+		return ret;
+	}
+
+	/* Store the version type */
+	strlcpy(hmbird_version_type, type_str, sizeof(hmbird_version_type));
+	pr_info("hmbird: Version type from device tree: %s\n", hmbird_version_type);
+	
+	of_node_put(node);
+	return 0;
+}
+
+EXPORT_SYMBOL(hmbird_check_version_type);
 
 static int set_proc_buf_val(struct file *file, const char __user *buf, size_t count, int *val)
 {
@@ -376,7 +432,15 @@ static int hmbird_proc_init(void)
 
 static int __init hmbird_common_init(void)
 {
+	int ret;
+	
+	/* Read hmbird version type from device tree */
+	ret = hmbird_read_version_type();
+	if (ret) {
+		pr_warn("hmbird: Failed to read version type from device tree, defaulting to non-GKI\n");
+		/* Default to HMBIRD_OGKI if we can't read from device tree */
+		strlcpy(hmbird_version_type, "HMBIRD_OGKI", sizeof(hmbird_version_type));
+	}
+	
 	return hmbird_proc_init();
 }
-- 
2.39.3